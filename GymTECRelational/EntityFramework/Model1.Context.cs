//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GymTECRelational.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GymTECEntities : DbContext
    {
        public GymTECEntities()
            : base("name=GymTECEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Clase> Clases { get; set; }
        public virtual DbSet<Direccion> Direccions { get; set; }
        public virtual DbSet<Empleado> Empleadoes { get; set; }
        public virtual DbSet<Maquina> Maquinas { get; set; }
        public virtual DbSet<Planilla> Planillas { get; set; }
        public virtual DbSet<Producto> Productoes { get; set; }
        public virtual DbSet<Puesto> Puestoes { get; set; }
        public virtual DbSet<Sucursal> Sucursals { get; set; }
        public virtual DbSet<Tipo_Equipo> Tipo_Equipo { get; set; }
        public virtual DbSet<Tipo_Servicio> Tipo_Servicio { get; set; }
        public virtual DbSet<Tratamiento_Spa> Tratamiento_Spa { get; set; }
        public virtual DbSet<Sucursal_Telefono> Sucursal_Telefono { get; set; }
        public virtual DbSet<Cliente_Clase> Cliente_Clase { get; set; }
        public virtual DbSet<Sucursal_Horario> Sucursal_Horario { get; set; }
    
        public virtual ObjectResult<Empleado> selectAllAdmins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("selectAllAdmins");
        }
    
        public virtual ObjectResult<Empleado> selectAllAdmins(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("selectAllAdmins", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<bool>> insertEmployee(string cedula, string puesto, string planilla, string distrito, string canton, string provincia, string sucursal, string nombre, string apellidos, Nullable<decimal> salario, string email, string contraseña, string salt, string token)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var planillaParameter = planilla != null ?
                new ObjectParameter("Planilla", planilla) :
                new ObjectParameter("Planilla", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("Distrito", distrito) :
                new ObjectParameter("Distrito", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("Canton", canton) :
                new ObjectParameter("Canton", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("Salario", salario) :
                new ObjectParameter("Salario", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("insertEmployee", cedulaParameter, puestoParameter, planillaParameter, distritoParameter, cantonParameter, provinciaParameter, sucursalParameter, nombreParameter, apellidosParameter, salarioParameter, emailParameter, contraseñaParameter, saltParameter, tokenParameter);
        }
    
        public virtual ObjectResult<Empleado> getEmployeeById(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("getEmployeeById", cedulaParameter);
        }
    
        public virtual ObjectResult<Empleado> getEmployeeById(string cedula, MergeOption mergeOption)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("getEmployeeById", mergeOption, cedulaParameter);
        }
    
        public virtual ObjectResult<Empleado> getEmployeeByMail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("getEmployeeByMail", emailParameter);
        }
    
        public virtual ObjectResult<Empleado> getEmployeeByMail(string email, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleado>("getEmployeeByMail", mergeOption, emailParameter);
        }
    
        public virtual int assignTokenAdmin(string token, Nullable<int> id)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignTokenAdmin", tokenParameter, idParameter);
        }
    
        public virtual int assignTokenEmployee(string token, string id)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignTokenEmployee", tokenParameter, idParameter);
        }
    
        public virtual int getAdminByMail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAdminByMail", emailParameter);
        }
    
        public virtual int insertAdmin(string email, string nombre, string apellidos, string contraseña, string salt, string token)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertAdmin", emailParameter, nombreParameter, apellidosParameter, contraseñaParameter, saltParameter, tokenParameter);
        }
    
        public virtual int insertGym(string nombre, string distrito, string canton, string provincia, Nullable<System.DateTime> fecha_Apertura, Nullable<int> capacidad_Max, string gerente)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("Distrito", distrito) :
                new ObjectParameter("Distrito", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("Canton", canton) :
                new ObjectParameter("Canton", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(string));
    
            var fecha_AperturaParameter = fecha_Apertura.HasValue ?
                new ObjectParameter("Fecha_Apertura", fecha_Apertura) :
                new ObjectParameter("Fecha_Apertura", typeof(System.DateTime));
    
            var capacidad_MaxParameter = capacidad_Max.HasValue ?
                new ObjectParameter("Capacidad_Max", capacidad_Max) :
                new ObjectParameter("Capacidad_Max", typeof(int));
    
            var gerenteParameter = gerente != null ?
                new ObjectParameter("Gerente", gerente) :
                new ObjectParameter("Gerente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertGym", nombreParameter, distritoParameter, cantonParameter, provinciaParameter, fecha_AperturaParameter, capacidad_MaxParameter, gerenteParameter);
        }
    
        public virtual ObjectResult<Sucursal> selectAllGyms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal>("selectAllGyms");
        }
    
        public virtual ObjectResult<Sucursal> selectAllGyms(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal>("selectAllGyms", mergeOption);
        }
    
        public virtual int activateGymSpa(Nullable<bool> state, string nombre)
        {
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(bool));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("activateGymSpa", stateParameter, nombreParameter);
        }
    
        public virtual int activateGymStore(Nullable<bool> state, string nombre)
        {
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(bool));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("activateGymStore", stateParameter, nombreParameter);
        }
    
        public virtual ObjectResult<Sucursal> selectGym(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal>("selectGym", nombreParameter);
        }
    
        public virtual ObjectResult<Sucursal> selectGym(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal>("selectGym", mergeOption, nombreParameter);
        }
    
        public virtual int updateGym(string currentname, string nombre, string distrito, string canton, string provincia, Nullable<System.DateTime> fecha_Apertura, Nullable<int> capacidad_Max, string gerente)
        {
            var currentnameParameter = currentname != null ?
                new ObjectParameter("Currentname", currentname) :
                new ObjectParameter("Currentname", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("Distrito", distrito) :
                new ObjectParameter("Distrito", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("Canton", canton) :
                new ObjectParameter("Canton", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(string));
    
            var fecha_AperturaParameter = fecha_Apertura.HasValue ?
                new ObjectParameter("Fecha_Apertura", fecha_Apertura) :
                new ObjectParameter("Fecha_Apertura", typeof(System.DateTime));
    
            var capacidad_MaxParameter = capacidad_Max.HasValue ?
                new ObjectParameter("Capacidad_Max", capacidad_Max) :
                new ObjectParameter("Capacidad_Max", typeof(int));
    
            var gerenteParameter = gerente != null ?
                new ObjectParameter("Gerente", gerente) :
                new ObjectParameter("Gerente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateGym", currentnameParameter, nombreParameter, distritoParameter, cantonParameter, provinciaParameter, fecha_AperturaParameter, capacidad_MaxParameter, gerenteParameter);
        }
    
        public virtual int deleteGym(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteGym", nombreParameter);
        }
    
        public virtual int addPhoneNumb(string nombre, string telefono)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addPhoneNumb", nombreParameter, telefonoParameter);
        }
    
        public virtual int deletePhoneNumb(string telefono)
        {
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deletePhoneNumb", telefonoParameter);
        }
    
        public virtual ObjectResult<Sucursal_Telefono> getAllPhoneNumbByGym(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal_Telefono>("getAllPhoneNumbByGym", nombreParameter);
        }
    
        public virtual ObjectResult<Sucursal_Telefono> getAllPhoneNumbByGym(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal_Telefono>("getAllPhoneNumbByGym", mergeOption, nombreParameter);
        }
    
        public virtual int updatePhoneNumb(string currentNumb, string nombre, string telefono)
        {
            var currentNumbParameter = currentNumb != null ?
                new ObjectParameter("CurrentNumb", currentNumb) :
                new ObjectParameter("CurrentNumb", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePhoneNumb", currentNumbParameter, nombreParameter, telefonoParameter);
        }
    
        public virtual int deleteMachine(string serial)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteMachine", serialParameter);
        }
    
        public virtual ObjectResult<Maquina> getAllMachines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getAllMachines");
        }
    
        public virtual ObjectResult<Maquina> getAllMachines(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getAllMachines", mergeOption);
        }
    
        public virtual ObjectResult<Maquina> getMachine(string serial)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getMachine", serialParameter);
        }
    
        public virtual ObjectResult<Maquina> getMachine(string serial, MergeOption mergeOption)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getMachine", mergeOption, serialParameter);
        }
    
        public virtual ObjectResult<Maquina> getMachinesByGym(string sucursal)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getMachinesByGym", sucursalParameter);
        }
    
        public virtual ObjectResult<Maquina> getMachinesByGym(string sucursal, MergeOption mergeOption)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Maquina>("getMachinesByGym", mergeOption, sucursalParameter);
        }
    
        public virtual int insertMachine(string serial, string tipo_Equipo, string sucursal, string marca, Nullable<decimal> costo)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var tipo_EquipoParameter = tipo_Equipo != null ?
                new ObjectParameter("Tipo_Equipo", tipo_Equipo) :
                new ObjectParameter("Tipo_Equipo", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertMachine", serialParameter, tipo_EquipoParameter, sucursalParameter, marcaParameter, costoParameter);
        }
    
        public virtual int updateMachine(string currentSerial, string serial, string tipo_Equipo, string sucursal, string marca, Nullable<decimal> costo)
        {
            var currentSerialParameter = currentSerial != null ?
                new ObjectParameter("CurrentSerial", currentSerial) :
                new ObjectParameter("CurrentSerial", typeof(string));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var tipo_EquipoParameter = tipo_Equipo != null ?
                new ObjectParameter("Tipo_Equipo", tipo_Equipo) :
                new ObjectParameter("Tipo_Equipo", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateMachine", currentSerialParameter, serialParameter, tipo_EquipoParameter, sucursalParameter, marcaParameter, costoParameter);
        }
    
        public virtual int deleteMachineType(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteMachineType", nombreParameter);
        }
    
        public virtual ObjectResult<Tipo_Equipo> getAllMachineTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Equipo>("getAllMachineTypes");
        }
    
        public virtual ObjectResult<Tipo_Equipo> getAllMachineTypes(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Equipo>("getAllMachineTypes", mergeOption);
        }
    
        public virtual ObjectResult<Tipo_Equipo> getMachineType(string typeName)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Equipo>("getMachineType", typeNameParameter);
        }
    
        public virtual ObjectResult<Tipo_Equipo> getMachineType(string typeName, MergeOption mergeOption)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Equipo>("getMachineType", mergeOption, typeNameParameter);
        }
    
        public virtual int insertMachineType(string nombre, string descripcion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertMachineType", nombreParameter, descripcionParameter);
        }
    
        public virtual int updateMachineType(string currentTypeName, string nombre, string descripcion)
        {
            var currentTypeNameParameter = currentTypeName != null ?
                new ObjectParameter("CurrentTypeName", currentTypeName) :
                new ObjectParameter("CurrentTypeName", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateMachineType", currentTypeNameParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int deleteJob(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteJob", nombreParameter);
        }
    
        public virtual ObjectResult<Puesto> getJob(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Puesto>("getJob", nombreParameter);
        }
    
        public virtual ObjectResult<Puesto> getJob(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Puesto>("getJob", mergeOption, nombreParameter);
        }
    
        public virtual ObjectResult<Puesto> gettAllJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Puesto>("gettAllJobs");
        }
    
        public virtual ObjectResult<Puesto> gettAllJobs(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Puesto>("gettAllJobs", mergeOption);
        }
    
        public virtual int insertJob(string nombre, string descripcion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertJob", nombreParameter, descripcionParameter);
        }
    
        public virtual int updateJob(string currentName, string nombre, string descripcion)
        {
            var currentNameParameter = currentName != null ?
                new ObjectParameter("CurrentName", currentName) :
                new ObjectParameter("CurrentName", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateJob", currentNameParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int deletePayroll(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deletePayroll", nombreParameter);
        }
    
        public virtual ObjectResult<Planilla> getAllPayrolls()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Planilla>("getAllPayrolls");
        }
    
        public virtual ObjectResult<Planilla> getAllPayrolls(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Planilla>("getAllPayrolls", mergeOption);
        }
    
        public virtual ObjectResult<Planilla> getPayroll(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Planilla>("getPayroll", nombreParameter);
        }
    
        public virtual ObjectResult<Planilla> getPayroll(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Planilla>("getPayroll", mergeOption, nombreParameter);
        }
    
        public virtual int insertPayRoll(string nombre, string descripcion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPayRoll", nombreParameter, descripcionParameter);
        }
    
        public virtual int updatePayRoll(string currentName, string nombre, string descripcion)
        {
            var currentNameParameter = currentName != null ?
                new ObjectParameter("CurrentName", currentName) :
                new ObjectParameter("CurrentName", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePayRoll", currentNameParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int deleteTreatment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteTreatment", idParameter);
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getAllTreatments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getAllTreatments");
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getAllTreatments(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getAllTreatments", mergeOption);
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getTreatment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getTreatment", idParameter);
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getTreatment(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getTreatment", mergeOption, idParameter);
        }
    
        public virtual int insertTreatment(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTreatment", nombreParameter);
        }
    
        public virtual int updateTreatment(Nullable<int> currentId, string nombre)
        {
            var currentIdParameter = currentId.HasValue ?
                new ObjectParameter("CurrentId", currentId) :
                new ObjectParameter("CurrentId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTreatment", currentIdParameter, nombreParameter);
        }
    
        public virtual int createProduct(string codigo_Barras, string nombre, string descripcion, Nullable<decimal> costo)
        {
            var codigo_BarrasParameter = codigo_Barras != null ?
                new ObjectParameter("Codigo_Barras", codigo_Barras) :
                new ObjectParameter("Codigo_Barras", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createProduct", codigo_BarrasParameter, nombreParameter, descripcionParameter, costoParameter);
        }
    
        public virtual int createService(string nombre, string descripcion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createService", nombreParameter, descripcionParameter);
        }
    
        public virtual int deleteEmployee(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployee", cedulaParameter);
        }
    
        public virtual int deleteProduct(string barCode)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProduct", barCodeParameter);
        }
    
        public virtual int deleteService(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteService", nombreParameter);
        }
    
        public virtual ObjectResult<Producto> getAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getAllProducts");
        }
    
        public virtual ObjectResult<Producto> getAllProducts(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getAllProducts", mergeOption);
        }
    
        public virtual ObjectResult<Tipo_Servicio> getAllServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Servicio>("getAllServices");
        }
    
        public virtual ObjectResult<Tipo_Servicio> getAllServices(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Servicio>("getAllServices", mergeOption);
        }
    
        public virtual ObjectResult<Producto> getProduct(string codigoBarras)
        {
            var codigoBarrasParameter = codigoBarras != null ?
                new ObjectParameter("CodigoBarras", codigoBarras) :
                new ObjectParameter("CodigoBarras", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getProduct", codigoBarrasParameter);
        }
    
        public virtual ObjectResult<Producto> getProduct(string codigoBarras, MergeOption mergeOption)
        {
            var codigoBarrasParameter = codigoBarras != null ?
                new ObjectParameter("CodigoBarras", codigoBarras) :
                new ObjectParameter("CodigoBarras", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getProduct", mergeOption, codigoBarrasParameter);
        }
    
        public virtual ObjectResult<Tipo_Servicio> getService(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Servicio>("getService", nombreParameter);
        }
    
        public virtual ObjectResult<Tipo_Servicio> getService(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tipo_Servicio>("getService", mergeOption, nombreParameter);
        }
    
        public virtual ObjectResult<selectAllEmployees_Result> selectAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectAllEmployees_Result>("selectAllEmployees");
        }
    
        public virtual int updateEmployee(string currentId, string cedula, string puesto, string planilla, string distrito, string canton, string provincia, string sucursal, string nombre, string apellidos, Nullable<decimal> salario, string email)
        {
            var currentIdParameter = currentId != null ?
                new ObjectParameter("CurrentId", currentId) :
                new ObjectParameter("CurrentId", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var planillaParameter = planilla != null ?
                new ObjectParameter("Planilla", planilla) :
                new ObjectParameter("Planilla", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("Distrito", distrito) :
                new ObjectParameter("Distrito", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("Canton", canton) :
                new ObjectParameter("Canton", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("Salario", salario) :
                new ObjectParameter("Salario", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateEmployee", currentIdParameter, cedulaParameter, puestoParameter, planillaParameter, distritoParameter, cantonParameter, provinciaParameter, sucursalParameter, nombreParameter, apellidosParameter, salarioParameter, emailParameter);
        }
    
        public virtual int updateProduct(string currentBarCode, string codigo_Barras, string nombre, string descripcion, Nullable<decimal> costo)
        {
            var currentBarCodeParameter = currentBarCode != null ?
                new ObjectParameter("CurrentBarCode", currentBarCode) :
                new ObjectParameter("CurrentBarCode", typeof(string));
    
            var codigo_BarrasParameter = codigo_Barras != null ?
                new ObjectParameter("Codigo_Barras", codigo_Barras) :
                new ObjectParameter("Codigo_Barras", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProduct", currentBarCodeParameter, codigo_BarrasParameter, nombreParameter, descripcionParameter, costoParameter);
        }
    
        public virtual int updateService(string currentName, string nombre, string descripcion)
        {
            var currentNameParameter = currentName != null ?
                new ObjectParameter("CurrentName", currentName) :
                new ObjectParameter("CurrentName", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateService", currentNameParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int assignProduct(string barCode, string gymName)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var gymNameParameter = gymName != null ?
                new ObjectParameter("GymName", gymName) :
                new ObjectParameter("GymName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignProduct", barCodeParameter, gymNameParameter);
        }
    
        public virtual int unsignProduct(string barCode, string gymName)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var gymNameParameter = gymName != null ?
                new ObjectParameter("GymName", gymName) :
                new ObjectParameter("GymName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("unsignProduct", barCodeParameter, gymNameParameter);
        }
    
        public virtual int assignTreatment(Nullable<int> treatmentId, string gymName)
        {
            var treatmentIdParameter = treatmentId.HasValue ?
                new ObjectParameter("treatmentId", treatmentId) :
                new ObjectParameter("treatmentId", typeof(int));
    
            var gymNameParameter = gymName != null ?
                new ObjectParameter("gymName", gymName) :
                new ObjectParameter("gymName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignTreatment", treatmentIdParameter, gymNameParameter);
        }
    
        public virtual int unsignTreatment(Nullable<int> treatmentId, string gymName)
        {
            var treatmentIdParameter = treatmentId.HasValue ?
                new ObjectParameter("treatmentId", treatmentId) :
                new ObjectParameter("treatmentId", typeof(int));
    
            var gymNameParameter = gymName != null ?
                new ObjectParameter("gymName", gymName) :
                new ObjectParameter("gymName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("unsignTreatment", treatmentIdParameter, gymNameParameter);
        }
    
        public virtual int deleteClass(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteClass", idParameter);
        }
    
        public virtual ObjectResult<Clase> getAllClasses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getAllClasses");
        }
    
        public virtual ObjectResult<Clase> getAllClasses(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getAllClasses", mergeOption);
        }
    
        public virtual ObjectResult<Clase> getClass(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getClass", idParameter);
        }
    
        public virtual ObjectResult<Clase> getClass(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getClass", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Clase> getClassesByGym(string sucursal)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getClassesByGym", sucursalParameter);
        }
    
        public virtual ObjectResult<Clase> getClassesByGym(string sucursal, MergeOption mergeOption)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("getClassesByGym", mergeOption, sucursalParameter);
        }
    
        public virtual int insertClass(Nullable<System.TimeSpan> hora_Inicio, Nullable<System.DateTime> fecha, string tipo_Servicio, Nullable<System.TimeSpan> hora_Final, string sucursal, string instructor, string modalidad, Nullable<int> capacidad)
        {
            var hora_InicioParameter = hora_Inicio.HasValue ?
                new ObjectParameter("Hora_Inicio", hora_Inicio) :
                new ObjectParameter("Hora_Inicio", typeof(System.TimeSpan));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipo_ServicioParameter = tipo_Servicio != null ?
                new ObjectParameter("Tipo_Servicio", tipo_Servicio) :
                new ObjectParameter("Tipo_Servicio", typeof(string));
    
            var hora_FinalParameter = hora_Final.HasValue ?
                new ObjectParameter("Hora_Final", hora_Final) :
                new ObjectParameter("Hora_Final", typeof(System.TimeSpan));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var instructorParameter = instructor != null ?
                new ObjectParameter("Instructor", instructor) :
                new ObjectParameter("Instructor", typeof(string));
    
            var modalidadParameter = modalidad != null ?
                new ObjectParameter("Modalidad", modalidad) :
                new ObjectParameter("Modalidad", typeof(string));
    
            var capacidadParameter = capacidad.HasValue ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertClass", hora_InicioParameter, fechaParameter, tipo_ServicioParameter, hora_FinalParameter, sucursalParameter, instructorParameter, modalidadParameter, capacidadParameter);
        }
    
        public virtual int updateClass(Nullable<int> id, Nullable<System.TimeSpan> hora_Inicio, Nullable<System.DateTime> fecha, string tipo_Servicio, Nullable<System.TimeSpan> hora_Final, string sucursal, string instructor, string modalidad, Nullable<int> capacidad)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var hora_InicioParameter = hora_Inicio.HasValue ?
                new ObjectParameter("Hora_Inicio", hora_Inicio) :
                new ObjectParameter("Hora_Inicio", typeof(System.TimeSpan));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipo_ServicioParameter = tipo_Servicio != null ?
                new ObjectParameter("Tipo_Servicio", tipo_Servicio) :
                new ObjectParameter("Tipo_Servicio", typeof(string));
    
            var hora_FinalParameter = hora_Final.HasValue ?
                new ObjectParameter("Hora_Final", hora_Final) :
                new ObjectParameter("Hora_Final", typeof(System.TimeSpan));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var instructorParameter = instructor != null ?
                new ObjectParameter("Instructor", instructor) :
                new ObjectParameter("Instructor", typeof(string));
    
            var modalidadParameter = modalidad != null ?
                new ObjectParameter("Modalidad", modalidad) :
                new ObjectParameter("Modalidad", typeof(string));
    
            var capacidadParameter = capacidad.HasValue ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateClass", idParameter, hora_InicioParameter, fechaParameter, tipo_ServicioParameter, hora_FinalParameter, sucursalParameter, instructorParameter, modalidadParameter, capacidadParameter);
        }
    
        public virtual ObjectResult<Clase> searchClasses(Nullable<System.TimeSpan> hora_Inicio, Nullable<System.DateTime> fecha, string tipo_Servicio, Nullable<System.TimeSpan> hora_Final, string sucursal)
        {
            var hora_InicioParameter = hora_Inicio.HasValue ?
                new ObjectParameter("Hora_Inicio", hora_Inicio) :
                new ObjectParameter("Hora_Inicio", typeof(System.TimeSpan));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipo_ServicioParameter = tipo_Servicio != null ?
                new ObjectParameter("Tipo_Servicio", tipo_Servicio) :
                new ObjectParameter("Tipo_Servicio", typeof(string));
    
            var hora_FinalParameter = hora_Final.HasValue ?
                new ObjectParameter("Hora_Final", hora_Final) :
                new ObjectParameter("Hora_Final", typeof(System.TimeSpan));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("searchClasses", hora_InicioParameter, fechaParameter, tipo_ServicioParameter, hora_FinalParameter, sucursalParameter);
        }
    
        public virtual ObjectResult<Clase> searchClasses(Nullable<System.TimeSpan> hora_Inicio, Nullable<System.DateTime> fecha, string tipo_Servicio, Nullable<System.TimeSpan> hora_Final, string sucursal, MergeOption mergeOption)
        {
            var hora_InicioParameter = hora_Inicio.HasValue ?
                new ObjectParameter("Hora_Inicio", hora_Inicio) :
                new ObjectParameter("Hora_Inicio", typeof(System.TimeSpan));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipo_ServicioParameter = tipo_Servicio != null ?
                new ObjectParameter("Tipo_Servicio", tipo_Servicio) :
                new ObjectParameter("Tipo_Servicio", typeof(string));
    
            var hora_FinalParameter = hora_Final.HasValue ?
                new ObjectParameter("Hora_Final", hora_Final) :
                new ObjectParameter("Hora_Final", typeof(System.TimeSpan));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clase>("searchClasses", mergeOption, hora_InicioParameter, fechaParameter, tipo_ServicioParameter, hora_FinalParameter, sucursalParameter);
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getTreatmentsByGym(string sucursal)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getTreatmentsByGym", sucursalParameter);
        }
    
        public virtual ObjectResult<Tratamiento_Spa> getTreatmentsByGym(string sucursal, MergeOption mergeOption)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tratamiento_Spa>("getTreatmentsByGym", mergeOption, sucursalParameter);
        }
    
        public virtual ObjectResult<Producto> getProductsByGym(string sucursal)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getProductsByGym", sucursalParameter);
        }
    
        public virtual ObjectResult<Producto> getProductsByGym(string sucursal, MergeOption mergeOption)
        {
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Producto>("getProductsByGym", mergeOption, sucursalParameter);
        }
    
        public virtual int addSchedule(string dia, string sucursal, Nullable<System.TimeSpan> hora_Apertura, Nullable<System.TimeSpan> hora_Cierre)
        {
            var diaParameter = dia != null ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var hora_AperturaParameter = hora_Apertura.HasValue ?
                new ObjectParameter("Hora_Apertura", hora_Apertura) :
                new ObjectParameter("Hora_Apertura", typeof(System.TimeSpan));
    
            var hora_CierreParameter = hora_Cierre.HasValue ?
                new ObjectParameter("Hora_Cierre", hora_Cierre) :
                new ObjectParameter("Hora_Cierre", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSchedule", diaParameter, sucursalParameter, hora_AperturaParameter, hora_CierreParameter);
        }
    
        public virtual int deleteSchedule(string dia, string sucursal)
        {
            var diaParameter = dia != null ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteSchedule", diaParameter, sucursalParameter);
        }
    
        public virtual ObjectResult<Sucursal_Horario> getAllSchedulesByGym(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal_Horario>("getAllSchedulesByGym", nombreParameter);
        }
    
        public virtual ObjectResult<Sucursal_Horario> getAllSchedulesByGym(string nombre, MergeOption mergeOption)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sucursal_Horario>("getAllSchedulesByGym", mergeOption, nombreParameter);
        }
    
        public virtual int updateSchedule(string currentDay, string dia, string sucursal, Nullable<System.TimeSpan> hora_Apertura, Nullable<System.TimeSpan> hora_Cierre)
        {
            var currentDayParameter = currentDay != null ?
                new ObjectParameter("CurrentDay", currentDay) :
                new ObjectParameter("CurrentDay", typeof(string));
    
            var diaParameter = dia != null ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var hora_AperturaParameter = hora_Apertura.HasValue ?
                new ObjectParameter("Hora_Apertura", hora_Apertura) :
                new ObjectParameter("Hora_Apertura", typeof(System.TimeSpan));
    
            var hora_CierreParameter = hora_Cierre.HasValue ?
                new ObjectParameter("Hora_Cierre", hora_Cierre) :
                new ObjectParameter("Hora_Cierre", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateSchedule", currentDayParameter, diaParameter, sucursalParameter, hora_AperturaParameter, hora_CierreParameter);
        }
    }
}
